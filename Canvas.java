package pck_practica6;

/**
 *
 * @author Airam
 * @author Gioele
 * 
 */

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgproc.Imgproc;
 
public class Canvas extends javax.swing.JPanel {

    private BufferedImage originalImage, imageCopy;
    private boolean hasImage;

    public Canvas() {
        initComponents();
        hasImage = false;
    }

    private static BufferedImage imageDeepCopy(BufferedImage bi) {
        return new BufferedImage(bi.getColorModel(), bi.copyData(null), bi.getColorModel().isAlphaPremultiplied(), null);
    }

    public static Mat bufferedImageToMat(BufferedImage bi) {
        Mat mat = new Mat(bi.getHeight(), bi.getWidth(), CvType.CV_8UC3);
        byte[] data = ((DataBufferByte) bi.getRaster().getDataBuffer()).getData();
        mat.put(0, 0, data);
        return mat;
    }

    private static BufferedImage thresholdImage(BufferedImage bi, int threshold) throws UnsupportedOperationException {
        try {
            Mat matImage = bufferedImageToMat(bi);
            Mat grayMatImage = new Mat(matImage.rows(), matImage.cols(), CvType.CV_8U);
            Mat thresholdMatImage = new Mat(matImage.rows(), matImage.cols(), CvType.CV_8U);
            Imgproc.cvtColor(matImage, grayMatImage, Imgproc.COLOR_BGR2GRAY);
            Imgproc.threshold(grayMatImage, thresholdMatImage, threshold, 255, Imgproc.THRESH_BINARY);
            return (BufferedImage) HighGui.toBufferedImage(thresholdMatImage);
        } catch (Exception e) {
            System.out.println("Error: " + e.getClass().getName() + " " + e.getMessage());
            return null;
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (hasImage) {
            //g.drawImage(imageCopy, 0, 0, this.getWidth(), this.getHeight(), this);
            g.drawImage(imageCopy.getScaledInstance(this.getWidth(), this.getHeight(), Image.SCALE_SMOOTH), 0, 0, this);
        }
    }

    public BufferedImage getImage() {
        return imageCopy;
    }

    public void setImage(BufferedImage image) {
        try {
            originalImage = image;
            imageCopy = imageDeepCopy(originalImage);
            hasImage = true;
            repaint();
        } catch (java.lang.NullPointerException e) {
            System.out.println("Error: " + e.getClass().getName() + " " + e.getMessage());
        }
    }

    public void setThreshold(int value) {
        imageCopy = thresholdImage(originalImage, value);
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );
    }// </editor-fold>                        

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}