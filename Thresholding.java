package pck_practica6;

/**
 *
 * @author Airam
 * @author Gioele
 * 
 */
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
 
public class Thresholding extends javax.swing.JFrame {

    private final static FileNameExtensionFilter IMAGE_FILE_NAME_EXTENSION_FILTER = new FileNameExtensionFilter("Archivo imagen (*.bmp;*.jpeg;*.jpg;*.png;*.tif;*.tiff)", "bmp", "jepg", "jpg", "png", "tif", "tiff");
    private final static String MESSAGE_CONFIRM_EXIT = "¿Desea salir de la aplicación?";
    private final static String MESSAGE_CONFIRM_EXIT_SAVE = "No ha guardado la imagen procesada. ¿Desea salir de la aplicación?";
    private final static String TITLE_CONFIRM_EXIT = "Confirmar salida";
    private JFileChooser openFileChooser;
    private JFileChooser saveFileChooser;
    private String openFilePath;
    private String saveFilePath;
    private int thresholding = 128;
    private boolean existUnsavedChanges = false;

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    
    public Thresholding() {
        initComponents();
        initFileChoosers();
        disableSaveFileMenuItem();
        disableThresholdMenuItem();
        originalImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen original | Pulsar CTRL + A para abrir archivo de imagen"));
    }

    private void initFileChoosers() {
        openFileChooser = new JFileChooser();
        openFileChooser.addChoosableFileFilter(IMAGE_FILE_NAME_EXTENSION_FILTER);
        openFileChooser.setAcceptAllFileFilterUsed(false);
        saveFileChooser = new JFileChooser();
        saveFileChooser.addChoosableFileFilter(IMAGE_FILE_NAME_EXTENSION_FILTER);
        saveFileChooser.setAcceptAllFileFilterUsed(false);
    }

    private void disableSaveFileMenuItem() {
        saveFileMenuItem.setEnabled(false);
    }

    private void enableSaveFileMenuItem() {
        saveFileMenuItem.setEnabled(true);
        
    }

    private void disableThresholdMenuItem() {
        thresholdMenuItem.setEnabled(false);
    }

    private void enableThresholdMenuItem() {
        thresholdMenuItem.setEnabled(true);
    }

    private boolean existUnsavedChanges() {
        return existUnsavedChanges;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        originalImagePanel = new javax.swing.JPanel();
        thresholdImagePanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        saveFileMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        thresholdMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Umbralizador de imagen");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        originalImagePanel.setBackground(new java.awt.Color(255, 255, 255));
        originalImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen original"));

        javax.swing.GroupLayout originalImagePanelLayout = new javax.swing.GroupLayout(originalImagePanel);
        originalImagePanel.setLayout(originalImagePanelLayout);
        originalImagePanelLayout.setHorizontalGroup(
            originalImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 626, Short.MAX_VALUE)
        );
        originalImagePanelLayout.setVerticalGroup(
            originalImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        thresholdImagePanel.setBackground(new java.awt.Color(255, 255, 255));
        thresholdImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen procesada"));

        javax.swing.GroupLayout thresholdImagePanelLayout = new javax.swing.GroupLayout(thresholdImagePanel);
        thresholdImagePanel.setLayout(thresholdImagePanelLayout);
        thresholdImagePanelLayout.setHorizontalGroup(
            thresholdImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 626, Short.MAX_VALUE)
        );
        thresholdImagePanelLayout.setVerticalGroup(
            thresholdImagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 428, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('A');
        fileMenu.setText("Archivo");

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setMnemonic('A');
        openFileMenuItem.setText("Abrir...");
        openFileMenuItem.setToolTipText("Abrir archivo de imagen");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenuItem);

        saveFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenuItem.setMnemonic('G');
        saveFileMenuItem.setText("Guardar...");
        saveFileMenuItem.setToolTipText("Guardar archivo de imagen umbralizada");
        saveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveFileMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setMnemonic('S');
        exitMenuItem.setText("Salir");
        exitMenuItem.setToolTipText("Salir de la aplicación");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        toolsMenu.setMnemonic('H');
        toolsMenu.setText("Herramientas");

        thresholdMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        thresholdMenuItem.setMnemonic('U');
        thresholdMenuItem.setText("Umbral...");
        thresholdMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdMenuItemActionPerformed(evt);
            }
        });
        toolsMenu.add(thresholdMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setMnemonic('Y');
        helpMenu.setText("Ayuda");

        aboutMenuItem.setText("Acerca de");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(originalImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thresholdImagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(originalImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(thresholdImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        int option = openFileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            openFilePath = openFileChooser.getSelectedFile().getAbsolutePath();
            //originalImageCanvas.setImage(openImage(openFilePath));
            //thresholdImageCanvas.setImage(originalImageCanvas.getImage());
            disableSaveFileMenuItem();
            enableThresholdMenuItem();
            originalImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen original"));
            thresholdImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen procesada | Pulsar CTRL + U para aplicar umbral"));
        }
    }                                                

    private void saveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        int option = saveFileChooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            saveFilePath = saveFileChooser.getSelectedFile().getAbsolutePath();
            //saveImage(saveFilePath, thresholdImageCanvas.getImage());
            existUnsavedChanges = false;
        }
    }                                                

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if (confirmExit())
            System.exit(0);
    }                                            

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        if (confirmExit()) {
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        } else {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }                                  

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                              
        AboutDialog aboutDialog = new AboutDialog(this, true);
        aboutDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        aboutDialog.setVisible(true);
    }                                             

    private void thresholdMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        ThresholdDialog thresholdDialog = new ThresholdDialog(this, true);
        thresholdDialog.setInitialThreshold(thresholding);
        thresholdDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        thresholdDialog.setVisible(true);
    }                                                 

    private boolean confirmExit() throws HeadlessException {
        return existUnsavedChanges() ? JOptionPane.showConfirmDialog(null, MESSAGE_CONFIRM_EXIT_SAVE, TITLE_CONFIRM_EXIT, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION : JOptionPane.showConfirmDialog(null, MESSAGE_CONFIRM_EXIT, TITLE_CONFIRM_EXIT, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
    }

    public BufferedImage openImage(String imageFilePathToOpen) {
        try {
            return ImageIO.read(new File(imageFilePathToOpen));
        } catch (IOException e) {
            System.out.println("No se pudo abrir el archivo de imagen " + imageFilePathToOpen);
            System.out.println("Error: " + e.getClass().getName() + " " + e.getMessage());
            System.exit(0);
            return null;
        }
    }

    private boolean saveImage(String imageFilePathToSave, BufferedImage imagen) {
        try {
            return ImageIO.write(imagen, "png", new File(imageFilePathToSave));
        } catch (IOException e) {
            System.out.println("No se pudo guardar el archivo de imagen " + imageFilePathToSave);
            System.out.println("Error: " + e.getClass().getName() + " " + e.getMessage());
            return false;
        }
    }

    public void setThreshold(int value) {
        thresholding = value;
        thresholdImagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen procesada | Umbral: " + thresholding));
        //thresholdImageCanvas.setThreshold(thresholding);
        existUnsavedChanges = true;
        enableSaveFileMenuItem();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Thresholding.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Thresholding().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openFileMenuItem;
    private javax.swing.JPanel originalImagePanel;
    private javax.swing.JMenuItem saveFileMenuItem;
    private javax.swing.JPanel thresholdImagePanel;
    private javax.swing.JMenuItem thresholdMenuItem;
    private javax.swing.JMenu toolsMenu;
    // End of variables declaration                   
}
