package pck_practica6;

/**
 *
 * @author Airam
 * @author Gioele
 * 
 */
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.JViewport;
import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS;
import static javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

public class ColorStatisticsFrame extends javax.swing.JFrame {

    private final static FileNameExtensionFilter IMAGE_FILE_NAME_EXTENSION_FILTER = new FileNameExtensionFilter("Archivo imagen (*.bmp;*.jpeg;*.jpg;*.png;*.tif;*.tiff)", "bmp", "jepg", "jpg", "png", "tif", "tiff");
    private final static String MESSAGE_CONFIRM_EXIT = "¿Desea salir de la aplicación?";
    private final static String TITLE_CONFIRM_EXIT = "Confirmar salida";
    private JFileChooser openFileChooser;
    private String openFilePath;
    JScrollBar horizontalScrollBar, verticalScrollBar;
    JViewport viewport;
    private Mat matImage;
    private BufferedImage image;

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    private boolean confirmExit() {
        return JOptionPane.showConfirmDialog(null, MESSAGE_CONFIRM_EXIT, TITLE_CONFIRM_EXIT, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION;
    }

    class Handler implements AdjustmentListener {

        @Override
        public void adjustmentValueChanged(AdjustmentEvent e) {
            Point esqSupIzda = viewport.getViewPosition();
            Dimension dimVista = viewport.getExtentSize();
            //Rectangle rect = viewport.getViewRect();
            ImageColorStatistics imageColorStatistics = new ImageColorStatistics();
            if (matImage != null) {
                imageColorStatistics.getColorStatistics(matImage, esqSupIzda, dimVista);
                colorStatisticsPanel.setStatistics(imageColorStatistics.getMaximum(), imageColorStatistics.getMinimum(), imageColorStatistics.getAverage());
            }
        }
    }
    
    public ColorStatisticsFrame() {
        initComponents();
        initFileChoosers();

        imageScrollPane.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_NEVER); //HORIZONTAL_SCROLLBAR_ALWAYS
        imageScrollPane.setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_NEVER); //VERTICAL_SCROLLBAR_ALWAYS
        viewport = imageScrollPane.getViewport();

        horizontalScrollBar = imageScrollPane.getVerticalScrollBar();
        verticalScrollBar = imageScrollPane.getHorizontalScrollBar();
        
        horizontalScrollBar.addAdjustmentListener(new Handler());
        verticalScrollBar.addAdjustmentListener(new Handler());
    }
    
    private void initFileChoosers() {
        openFileChooser = new JFileChooser();
        openFileChooser.addChoosableFileFilter(IMAGE_FILE_NAME_EXTENSION_FILTER);
        openFileChooser.setAcceptAllFileFilterUsed(false);
    }
    
     public BufferedImage openImage(String imageFilePathToOpen) {
        try {
            return ImageIO.read(new File(imageFilePathToOpen));
        } catch (IOException e) {
            System.out.println("No se pudo abrir el archivo de imagen " + imageFilePathToOpen);
            System.out.println("Error: " + e.getClass().getName() + " " + e.getMessage());
            System.exit(0);
            return null;
        }
    }

    private static Mat bufferedImageToMat(BufferedImage bi) {
        Mat mat = new Mat(bi.getHeight(), bi.getWidth(), CvType.CV_8UC3);
        byte[] data = ((DataBufferByte) bi.getRaster().getDataBuffer()).getData();
        mat.put(0, 0, data);
        return mat;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        background = new javax.swing.JPanel();
        imageScrollPane = new javax.swing.JScrollPane();
        imagePanel = new ImagePanel();
        colorStatisticsPanel = new ColorStatisticsPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileMenu = new javax.swing.JMenuItem();
        fileMenuSeparator = new javax.swing.JPopupMenu.Separator();
        exitMenu = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Estadísticas subimagen");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        background.setBackground(new java.awt.Color(255, 255, 255));

        imageScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        imageScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Imagen"));

        imagePanel.setBackground(new java.awt.Color(255, 255, 255));
        imagePanel.setToolTipText("Usar la barras para cambiar la parte de la imagen a postrar");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );

        imageScrollPane.setViewportView(imagePanel);

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(colorStatisticsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addComponent(imageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorStatisticsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setMnemonic('A');
        fileMenu.setText("Archivo");

        openFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenu.setMnemonic('A');
        openFileMenu.setText("Abrir...");
        openFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenu);
        fileMenu.add(fileMenuSeparator);

        exitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenu.setMnemonic('S');
        exitMenu.setText("Salir");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        jMenuBar1.add(fileMenu);

        helpMenu.setMnemonic('Y');
        helpMenu.setText("Ayuda");

        aboutMenu.setMnemonic('A');
        aboutMenu.setText("Acerca de...");
        aboutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenu);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void openFileMenuActionPerformed(java.awt.event.ActionEvent evt) {                                             
        int option = openFileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            openFilePath = openFileChooser.getSelectedFile().getAbsolutePath();
            image = openImage(openFilePath);
            imageScrollPane.setHorizontalScrollBarPolicy(HORIZONTAL_SCROLLBAR_ALWAYS);
            imageScrollPane.setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);
            imagePanel.setImage(image);
            imagePanel.setPreferredSize(new Dimension(image.getWidth(), image.getHeight()));
            matImage = bufferedImageToMat(imagePanel.getImage());
        }
    }                                            

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {                                         
        if (confirmExit())
            System.exit(0);
    }                                        

    private void aboutMenuActionPerformed(java.awt.event.ActionEvent evt) {                                          
        AboutDialog aboutDialog = new AboutDialog(this, true);
        aboutDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        aboutDialog.setVisible(true);
    }                                         

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        if (confirmExit()) {
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        } else {
            setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        }
    }                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColorStatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColorStatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColorStatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColorStatisticsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColorStatisticsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem aboutMenu;
    private javax.swing.JPanel background;
    private ColorStatisticsPanel colorStatisticsPanel;
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileMenuSeparator;
    private javax.swing.JMenu helpMenu;
    private ImagePanel imagePanel;
    private javax.swing.JScrollPane imageScrollPane;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem openFileMenu;
    // End of variables declaration                   
}
